#include <stdio.h>
#include <stdlib.h>

#define MAX 100
#define INF 999999

typedef struct {
    int u, v, weight;
} Edge;

int parent[MAX];

int find(int i) {
    if (parent[i] == -1)
        return i;
    return parent[i] = find(parent[i]);
}

void union_sets(int u, int v) {
    int u_set = find(u);
    int v_set = find(v);
    if (u_set != v_set) {
        parent[u_set] = v_set;
    }
}

int compare_edges(const void *a, const void *b) {
    Edge *e1 = (Edge *)a;
    Edge *e2 = (Edge *)b;
    return e1->weight - e2->weight;
}

int main() {
    int n;
    int adj[MAX][MAX];
    Edge edgeList[MAX * MAX];
    int edgeCount = 0;

    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    printf("Enter the adjacency matrix (use 0 for no edge):\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &adj[i][j]);
            if (adj[i][j] == 0)
                adj[i][j] = INF; // Treat 0 as no edge
        }
    }

    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (adj[i][j] != INF) {
                edgeList[edgeCount].u = i;
                edgeList[edgeCount].v = j;
                edgeList[edgeCount].weight = adj[i][j];
                edgeCount++;
            }
        }
    }

    qsort(edgeList, edgeCount, sizeof(Edge), compare_edges);

    for (int i = 0; i < n; i++) {
        parent[i] = -1;
    }

    int minCost = 0;
    printf("\nEdges in the Minimum Cost Spanning Tree:\n");

    int edgesAccepted = 0;
    for (int i = 0; i < edgeCount && edgesAccepted < n - 1; i++) {
        int u = edgeList[i].u;
        int v = edgeList[i].v;
        int w = edgeList[i].weight;

        if (find(u) != find(v)) {
            union_sets(u, v);
            printf("(%d - %d) : %d\n", u, v, w);
            minCost += w;
            edgesAccepted++;
        }
    }

    printf("\nTotal Minimum Cost: %d\n", minCost);

    return 0;
}
